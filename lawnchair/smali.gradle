import org.gradle.internal.os.OperatingSystem
import smali.SmaliTask

dependencies {
    lawnchairCompileOnly fileTree(dir: 'build/lawnchairlibs', include: '*.jar')
}

task 'buildLawnchairSmali' {
    def smaliInputDir = file('lawnchair/smali')
    def dexOutputDir = file('build/lawnchairsmali')
    def jarOutputDir = file('build/lawnchairlibs')

    smaliInputDir.mkdirs()
    dexOutputDir.mkdirs()
    jarOutputDir.mkdirs()

    def smaliFiles = fileTree(dir: smaliInputDir, include: '**/*.smali')
    if (!smaliFiles.empty) {
        def name = "lawnchair"

        def intermediateFile = dexOutputDir.toPath().resolve("${name}.dex").toFile()
        def jarFile = jarOutputDir.toPath().resolve("${name}.jar").toFile()
        def errorFile = jarOutputDir.toPath().resolve("${name}-error.zip").toFile()

        dependsOn "dex_to_jar_${name}"
        task "smali_to_dex_${name}"(type: SmaliTask) {
            source = smaliFiles
            destination = intermediateFile
        }
        task "dex_to_jar_${name}"(type: JavaExec) {
            dependsOn "smali_to_dex_${name}"
            classpath = fileTree(dir: file('buildSrc/dex2jar'), include: '*.jar')
            main = "com.googlecode.dex2jar.tools.Dex2jarCmd"
            args = [
                    intermediateFile,
                    "--output", jarFile,
                    "--exception-file", errorFile,
                    "--not-handle-exception",
                    "--force"
            ]

            // Up-to-date checks
            inputs.file intermediateFile
            outputs.file jarFile
        }
    }
}

def copySmaliLibDex(dirName) {
    def libDex = 'build/lawnchairsmali/lawnchair.dex'
    println "copy $libDex into $dirName"
    copy {
        from "build/lawnchairsmali"
        into dirName
        include "lawnchair.dex"
    }
}

static String dashSeparated(String s) {
    return s.replaceAll(/\B[A-Z]/) { '-' + it }.toLowerCase()
}

tasks.whenTaskAdded { task ->
    def name = task.name
    if (name.startsWith('pre') && name.contains('Lawnchair') && name.endsWith('Build')) {
        task.dependsOn 'buildLawnchairSmali'
    } else if (name.startsWith('transformDexArchiveWithDexMergerFor') && !name.endsWith('Test')) {
        def variantName = name.substring(35).uncapitalize()
        def split = dashSeparated(variantName).split('-')
        def buildType = split[split.length - 1]
        variantName = variantName.substring(0, variantName.length() - buildType.length())
        def dirName = "./build/intermediates/transforms/dexMerger/${variantName}/${buildType}/0/"
        task.doLast {
            copySmaliLibDex(dirName)
        }
    } else if (name.startsWith('transformClassesAndResourcesWithR8For') && !name.endsWith('Test')) {
        def variantName = name.substring(37).uncapitalize()
        def split = dashSeparated(variantName).split('-')
        def buildType = split[split.length - 1]
        variantName = variantName.substring(0, variantName.length() - buildType.length())
        def dirName = "./build/intermediates/transforms/r8/${variantName}/${buildType}/0/"
        task.doLast {
            copySmaliLibDex(dirName)
        }
    }
}
